-Implementing Reference Variables-

Datatypes
  -Add new ref-lambda 

  -Add new ref-closure for that is the result of a reflambda

  -Add new ref-exp this has a single field of a symbol
    [closure-ref
   (params (list-of (lambda (v) (or (symbol? v) (list? v)))))
   (bodies (list-of expression?))
   (env environment?)])

    [lambda-ref-exp
   (params (list-of
            (lambda (v) (or (symbol? v) (list? v)))))
   (bodies (list-of expression?))]

Parse
  -Parse out ref-lambdas and ref-exp

Syntax Expand
  -There is no new syntax expansion

Interpret
  -Interpret a reference by simply returning its value the symbol
  -Convert reference lambdas to reference closure pulling out all references to be their single symbol when they are passed as args
    ex.) (lambda ((ref a) b)) a) -> '(a b)
  -Change app-exp to look at type of closure
    -If it is a reference type change (var-exp 'symbol') to (ref-exp 'symbol') this keeps the paramter from being passed by value, it lets us know what symbol we need to look up
  -Change apply-proc 
    -If arg is of ref type in paramter list look up its refernece and pass that in as the value